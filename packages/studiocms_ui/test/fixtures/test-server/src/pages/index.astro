---

/**
 * Generates an array of test objects from Astro test files in the current directory.
 *
 * - Uses `import.meta.glob` to eagerly import all files matching the pattern `*-test.astro`.
 * - Extracts the file paths, removes the `.astro` extension, and formats them.
 * - Each test object contains:
 *   - `label`: A human-readable label generated by removing './', replacing hyphens with spaces,
 *     and capitalizing each word.
 *   - `path`: The route path for the test, based on the file name.
 *
 * @type {{ label: string; path: string }[]}
 */
const currentTests: { label: string; path: string }[] = Object.keys(
	import.meta.glob('./*-test.astro', { eager: true })
)
	.filter((path) => path !== './_template-test.astro') // Exclude the template test file
	// Remove the .astro extension from each path
	.map((path) => path.replace('.astro', ''))
	// Map to an array of test objects with label and path
	.map((path) => ({
		label: path
			.replace('./', '')
			.replace(/-/g, ' ')
			.replace(/\b\w/g, (c) => c.toUpperCase()),
		path: `/${path.replace('./', '')}`,
	}));
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Test Fixtures</title>
	</head>
	<body>
		<h1>Available Test Fixtures</h1>
		<ul>
			{currentTests.map(({ label, path }) => (
				<li>
					<a href={path}>{label}</a>
				</li>
			))}
		</ul>
	</body>
</html>
