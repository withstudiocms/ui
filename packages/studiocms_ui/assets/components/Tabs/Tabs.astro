---
import type { StudioCMSColorway } from '../../utils/colors.js';
import { generateID } from '../../utils/generateID.js';
import Icon from '../Icon/Icon.astro';
import type { HeroIconName } from '../Icon/iconType.js';
import './tabs.css';

interface Tab {
	icon?: HeroIconName;
	label: string;
	color: Exclude<StudioCMSColorway, 'default'>;
	tabId: string;
}

/**
 * The props for the Tabs component.
 */
interface Props {
	/**
	 * The sync key for the tabs. If provided, the active tab will be synced across all instances of the tabs with the same sync key.
	 * Additionally, the active tab will be stored session- or local storage depending on the `storage` prop.
	 */
	syncKey?: string;
	/**
	 * The storage type for the tabs. Defaults to `session`.
	 */
	storage?: 'session' | 'persistent';
	/**
	 * The variant of the tabs. Defaults to `default`.
	 */
	variant?: 'default' | 'starlight';
	/**
	 * The alignment of the tabs. Defaults to `left`.
	 */
	align?: 'left' | 'center' | 'right';
}

const extractTabInfoWithRegex = (input: string) => {
	const tabItemRegex = /<sui-tab-item([^>]*)>/g;

	const attributeRegex = /data-([\w-]+)="([^"]*)"/g;

	const tabs: Tab[] = [];
	let tabMatch: RegExpExecArray | null;

	// biome-ignore lint/suspicious/noAssignInExpressions: Nop
	while ((tabMatch = tabItemRegex.exec(input)) !== null) {
		let attributes: { [key: string]: string } = {};

		let attributeMatch: RegExpExecArray | null;

		if (!tabMatch[1]) continue;

		// biome-ignore lint/suspicious/noAssignInExpressions: Nop
		while ((attributeMatch = attributeRegex.exec(tabMatch[1])) !== null) {
			if (!attributeMatch[1] || !attributeMatch[2]) continue;

			if (
				attributeMatch[1] === 'icon' ||
				attributeMatch[1] === 'label' ||
				attributeMatch[1] === 'color'
			) {
				attributes[attributeMatch[1]] = attributeMatch[2];
			}

			if (attributeMatch[1] === 'tab-id') {
				attributes.tabId = attributeMatch[2];
			}
		}

		tabs.push(attributes as unknown as Tab);
	}

	return tabs;
};

const markTabAsActive = (tabId: string, html: string): string => {
	if (!tabId) return html;

	const updatedHtml = html.replace(
		/<sui-tab-item[^>]*data-tab-id="([^"]*)"[^>]*>/g,
		(match, tabIdValue) => {
			// Check if the tabId matches
			if (tabIdValue === tabId) {
				// Check if the element already has a class attribute
				if (match.includes('class="')) {
					// If class attribute exists, add 'active' to the class attribute
					return match.replace(/(class="[^"]*)"/, '$1 active"');
				}

				// If class attribute does not exist, add it
				return match.replace(/(<sui-tab-item[^>]*data-tab-id="[^"]*")/, '$1 class="active"');
			}
			return match; // Return original if the tabId does not match
		}
	);

	return updatedHtml;
};

const uniqueId = generateID('sui-tabs-container');

const {
	syncKey: originalSyncKey,
	storage = 'session',
	variant = 'default',
	align = 'left',
} = Astro.props;

const syncKey = originalSyncKey ? `sui-tabs-${originalSyncKey}` : undefined;

const tabContents = await Astro.slots.render('default');
const tabs = extractTabInfoWithRegex(tabContents);
const finalizedTabContents = markTabAsActive(tabs[0]?.tabId || '', tabContents);
const containerId = generateID('sui-tabs-container');
---

<div 
  class="sui-tabs-container"
  id={containerId}
  data-sync-key={syncKey}
  data-unique-id={uniqueId}
  data-storage-strategy={storage}
  class:list={[variant, align]}
>
  <div class="sui-tabs-list" role="tablist">
    {tabs.map((tab, i) => (
      <button 
        role="tab"
		type="button"
        class="sui-tab-header"
        id={syncKey ? `${syncKey}-${i}` : undefined}
        tabindex={i === 0 ? 0 : -1}
        data-tab-child={tab.tabId}
        class:list={[i === 0 && "active", tab.color, syncKey && `${syncKey}:${i}`]}
      >
        {tab.icon && (
          <Icon name={tab.icon} width={24} height={24} />
        )}
        <span>{tab.label}</span>
      </button>
    ))}
  </div>
  <div class="sui-tabs-content">
    <Fragment set:html={finalizedTabContents} />
  </div>
</div>
<script>
import "studiocms:ui/scripts/tabs"
</script>
