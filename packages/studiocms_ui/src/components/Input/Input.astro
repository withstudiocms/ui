---
// @ts-ignore - This is a TypeGenerated Module, available in dev thanks to manual d.ts file - This comment is here because this causes a type-error during build
import { type AvailableIcons } from 'studiocms:ui/icons';
import type { HTMLAttributes } from 'astro/types';
import { generateID } from '../../utils/generateID.js';
import './input.css';
import { AstroError } from 'astro/errors';
import Icon from '../Icon/Icon.astro';

/**
 * The props for the input component.
 */
interface Props extends HTMLAttributes<'input'> {
	/**
	 * The label of the input.
	 */
	label?: string;
	/**
	 * The type of the input. Defaults to `text`.
	 */
	type?: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url' | 'search';
	/**
	 * The placeholder of the input.
	 */
	placeholder?: string;
	/**
	 * Whether the input is required. Defaults to `false`.
	 */
	isRequired?: boolean;
	/**
	 * The name attribute for the input. Useful for form submission.
	 */
	name?: string;
	/**
	 * Whether the input is disabled. Defaults to `false`.
	 */
	disabled?: boolean;
	/**
	 * The default value of the input.
	 */
	defaultValue?: string;
	/**
	 * Additional classes to apply to the input.
	 */
	class?: string;
	/**
	 * An optional icon to be shown in the input.
	 */
	icon?:
		| AvailableIcons
		| {
				name: AvailableIcons;
				position: 'left' | 'right';
			};
	/**
	 * A description to be shown below the input
	 */
	description?: string;
}

const {
	label,
	placeholder,
	name = generateID('input'),
	type = 'text',
	defaultValue,
	isRequired = false,
	disabled = false,
	class: className,
	icon,
	description,
	...props
} = Astro.props;

if (typeof icon === 'object') {
	if (!icon.name) throw new AstroError('Missing icon name for input!');
	if (!icon.position) throw new AstroError('Missing icon position for input!');

	if (!['left', 'right'].includes(icon.position))
		throw new AstroError('Invalid icon position for input!');
}

const iconPos = icon
	? typeof icon === 'string' || (typeof icon === 'object' && icon.position === 'left')
		? 'left'
		: 'right'
	: undefined;
---

<label for={name} class="sui-input-label" class:list={[disabled && "disabled"]}>
	{label && (
		<span class="label">
			{label} <span class="req-star">{isRequired && "*"}</span>
		</span>
	)}
	<div class="sui-input-wrapper">
		{typeof icon === "object" && (
			<Icon name={icon.name} width={20} height={20} class="input-icon" class:list={[`icon-${iconPos}`]} />
		)}
		{typeof icon === "string" && (
			<Icon name={icon} width={20} height={20} class="input-icon icon-left" />
		)}
		<input
			placeholder={placeholder}
			name={name}
			id={name}
			type={type}
			class="sui-input"
			class:list={[className, iconPos && `icon-${iconPos}`]}
			required={isRequired}
			disabled={disabled}
			value={defaultValue}
			{...props}
		/>
	</div>
	{description && (
		<span class="sui-input-desc">{description}</span>
	)}
</label>
