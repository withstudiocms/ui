---
import { generateID } from '../../utils/generateID.js';
import Badge from '../Badge/Badge.astro';
import Icon from '../Icon/Icon.astro';
import './select.css';

/**
 * Represents an option in the select component.
 */
export interface SelectOption {
	/**
	 * The label of the option displayed to the user.
	 */
	label: string;
	/**
	 * The value of the option used for form submission.
	 */
	value: string;
	/**
	 * Whether the option is disabled. Defaults to `false`.
	 */
	disabled?: boolean;
}

/**
 * Base properties shared by both single and multiple select components.
 */
export interface SelectBaseProps {
	/**
	 * The label of the select field.
	 */
	label?: string;
	/**
	 * Additional classes to apply to the select component.
	 */
	class?: string;
	/**
	 * The name of the select field, used for form submission.
	 */
	name?: string;
	/**
	 * Whether the select field is required. Defaults to `false`.
	 */
	isRequired?: boolean;
	/**
	 * The options to display in the select dropdown.
	 */
	options: SelectOption[];
	/**
	 * Whether the select field is disabled. Defaults to `false`.
	 */
	disabled?: boolean;
	/**
	 * Whether the select field should take up the full width of its container. Defaults to `false`.
	 */
	fullWidth?: boolean;
	/**
	 * The placeholder text to display when no option is selected. Defaults to `Select`.
	 */
	placeholder?: string;
}

/**
 * Properties specific to single-select mode.
 */
export interface SingleSelectProps extends SelectBaseProps {
	/**
	 * Whether the select accepts multiple options.
	 */
	multiple?: false;
	/**
	 * The default selected value.
	 */
	defaultValue?: string;
	/**
	 * The maximum number of options that can be selected.
	 * This property has no effect in single-select mode.
	 */
	max?: never;
}

/**
 * Properties specific to multi-select mode.
 */
export interface MultiSelectProps extends SelectBaseProps {
	/**
	 * Whether the select accepts multiple options.
	 */
	multiple: true;
	/**
	 * The default selected values.
	 */
	defaultValue?: string[];
	/**
	 * The maximum number of options that can be selected.
	 */
	max?: number;
}

/**
 * Union type representing all possible select component properties.
 */
export type Props = SingleSelectProps | MultiSelectProps;

const {
	label,
	defaultValue,
	class: className,
	name = generateID('select'),
	isRequired,
	options = [],
	disabled,
	fullWidth,
	placeholder = 'Select',
	multiple = false,
	max = undefined,
} = Astro.props;

let selected: SelectOption | (SelectOption | undefined)[] | undefined;

if (multiple && Array.isArray(defaultValue)) {
	selected = defaultValue.map((x) => options.find((y) => y.value === x));
} else {
	selected = options.find((x) => x.value === defaultValue);
}

const defaultLabel = selected
	? Array.isArray(selected)
		? selected.map((x) => x?.label)
		: selected.label
	: placeholder;
---

<div
	id={`${name}-container`}
	class="sui-select-label"
	class:list={[disabled && "disabled", className, fullWidth && "full"]}
	data-options={JSON.stringify(options)}
	data-multiple={multiple ? "true" : undefined}
	data-multiple-max={multiple && max !== undefined ? max : undefined}
	data-id={name}
>
	{label && (
		<label class="label" for={`${name}-select-btn`}>
			{label}
			<span class="req-star">{isRequired && "*"}</span>
		</label>
	)}
	<div class="sui-select-dropdown-container">
		<button
			class="sui-select-button"
			role="combobox"
			aria-controls={`${name}-dropdown`}
			aria-expanded="false"
			id={`${name}-select-btn`}
			tabindex={disabled ? -1 : 0}
			type="button"
			aria-label={placeholder}
			title={placeholder}
		>
			<span class="sui-select-value-span" id={`${name}-value-span`}>
				{Array.isArray(selected)
					? <div class="sui-select-badge-container">{selected.map((s) => s && <Badge class="sui-select-badge" data-value={s.value} size="sm" label={s.label} iconPosition="right" icon="x-mark" />)}</div>
					: selected?.label ?? defaultLabel
				}
			</span>
			<Icon name="chevron-up-down" width={24} height={24} class="sui-select-chevron" />
		</button>
		<ul class="sui-select-dropdown" role="listbox" id={`${name}-dropdown`}>
			{
				options.map((x, i) => {
					const isSelected = Array.isArray(selected)
						? selected.map((y) => y && y.value).includes(x.value)
						: selected?.value === x.value;
					return (
						<li
							class="sui-select-option"
							role="option"
							value={x.value}
							class:list={[
								isSelected && `selected`,
								x.disabled && "disabled",
							]}
							id={isSelected ? `${name}-selected` : ""}
							data-option-index={i}
						>
							{x.label}
						</li>
					)
				})
			}
		</ul>
	</div>
	<select class="sui-hidden-select" id={name} name={name} required={isRequired} multiple={multiple ? "" : undefined} hidden tabindex="-1">
		<option value={""}> Select </option>
		{
			options.map((x) => {
				const isSelected = Array.isArray(selected)
					? selected.map((y) => y && y.value).includes(x.value)
					: selected?.value === x.value;
					
				return (
					<option
						value={x.value}
						selected={isSelected}
						disabled={x.disabled}
					>
						{x.label}
					</option>
				)
			})
		}
	</select>
	{multiple && max !== undefined && (
		<span class="sui-select-max-span">
			<span class="sui-select-select-count">0</span> / {max} selected
		</span>
	)}
	{
		multiple && Array.isArray(selected ?? []) && (		
			<div class="sui-select-badge-container-below"></div>
		)
	}
</div>
<script>
import "studiocms:ui/scripts/select"
</script>
