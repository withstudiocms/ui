---
import Icon from '../utils/Icon.astro';
import { generateID } from '../utils/generateID';

interface Option {
	label: string;
	value: string;
	disabled?: boolean;
};

interface Props {
	label?: string;
	defaultValue?: string;
	class?: string;
	name?: string;
	isRequired?: boolean;
	options: Option[];
	disabled?: boolean;
	fullWidth?: boolean;
	placeholder?: string;
};

const {
	label,
	defaultValue,
	class: className,
	name = generateID('select'),
	isRequired,
	options = [],
	disabled,
	fullWidth,
    placeholder
} = Astro.props;
---

<div
    id={`${name}-container`}
    class="sui-select-label"
    class:list={[disabled && "disabled", className, fullWidth && "full"]}
>
    {label && (
        <label class="label" for={`${name}-select-btn`}>
            {label}
            <span class="req-star">{isRequired && "*"}</span>
        </label>
    )}
    <button
        class="sui-select-button"
        role="combobox"
        aria-controls={`${name}-dropdown`}
        aria-expanded="false"
        id={`${name}-select-btn`}
        type="button"
    >
        <span id={`${name}-value-span`}>
            {
                defaultValue
                    ? options.find((x) => x.value === defaultValue)?.label
                    : placeholder || "Select"
            }
        </span>
        <Icon name="chevron-up-down" width={24} height={24} />
    </button>
    <ul class="sui-select-dropdown" role="listbox" id={`${name}-dropdown`}>
        {
            options.map((x, i) => (
                <li
                    class="sui-select-option"
                    role="option"
                    value={x.value}
                    class:list={[
                        defaultValue === x.value && `selected`,
                        x.disabled && "disabled",
                    ]}
                    id={defaultValue === x.value ? `${name}-selected` : ""}
                    data-option-index={i}
                    tabindex={x.disabled ? -1 : 0}
                >
                    {x.label}
                </li>
            ))
        }
    </ul>
    <select class="sui-hidden-select" id={name} name={name} required={isRequired}>
        <option value={""}> Select </option>
        {
            options.map((x) => (
                <option
                    value={x.value}
                    selected={defaultValue === x.value}
                    disabled={x.disabled}
                >
                    {x.label}
                </option>
            ))
        }
    </select>
</div>
<script is:inline define:vars={{ id: name, options }}>
    const container = document.getElementById(`${id}-container`);
    const hiddenSelect = document.getElementById(id);
    const button = document.getElementById(`${id}-select-btn`);
    const valueSpan = document.getElementById(`${id}-value-span`);
    const dropdown = document.getElementById(`${id}-dropdown`);
    const optionElements = container.querySelectorAll("li");

    let active = false;

    button.addEventListener("click", () => {
        const { bottom, left, right, width, x, y, height } =
            button.getBoundingClientRect();

        const optionHeight = 36;
        const totalBorderSize = 2;
        const margin = 4;

        const dropdownHeight =
            options.length * optionHeight + totalBorderSize + margin;

        const CustomRect = {
            top: bottom + margin,
            left,
            right,
            bottom: bottom + margin + dropdownHeight,
            width,
            height: dropdownHeight,
            x,
            y: y + height + margin,
        };

        if (active) {
            button.ariaExpanded = false;
            dropdown.classList.remove("active", "above");
            active = false;
            return;
        }

        active = true;
        button.ariaExpanded = true;

        if (
            CustomRect.top >= 0 &&
            CustomRect.left >= 0 &&
            CustomRect.bottom <=
                (window.innerHeight || document.documentElement.clientHeight) &&
            CustomRect.right <=
                (window.innerWidth || document.documentElement.clientWidth)
        ) {
            dropdown.classList.add("active");
        } else {
            dropdown.classList.add("active", "above");
        }
    });

    optionElements.forEach((option) => {
        const handleSelection = (e) => {
            e.stopImmediatePropagation();
            if (option.id === `${id}-selected` || !id) return;

            const currentlySelected = document.getElementById(`${id}-selected`);

            if (currentlySelected) {
                currentlySelected.classList.remove("selected");
                currentlySelected.id = "";
            }

            option.id = `${id}-selected`;
            option.classList.add("selected");

            const opt = options[parseInt(option.dataset.optionIndex)];
            hiddenSelect.value = opt.value;

            valueSpan.textContent = opt.label;
            dropdown.classList.remove("active", "above");

            active = false;
        }

        option.addEventListener("click", handleSelection);
        option.addEventListener("keydown", (e) => {
            if (e.key === 'Enter') {
                handleSelection(e);
            }
        });
    });

    window.addEventListener("scroll", () => {
        dropdown.classList.remove("active", "above");
        active = false;
    });

    hideOnClickOutside(container);

    function hideOnClickOutside(element) {
        const outsideClickListener = (event) => {
            if (
                !element.contains(event.target) &&
                isVisible(element) &&
                active === true
            ) {
                // or use: event.target.closest(selector) === null
                dropdown.classList.remove("active", "above");
                active = false;
            }
        };

        const removeClickListener = () => {
            document.removeEventListener("click", outsideClickListener);
        };

        document.addEventListener("click", outsideClickListener);
    }

    // source (2018-03-11): https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js
    const isVisible = (elem) =>
        !!elem &&
        !!(
            elem.offsetWidth ||
            elem.offsetHeight ||
            elem.getClientRects().length
        );
</script>
<style>
    .sui-select-label {
        width: fit-content;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        min-width: 200px;
        position: relative;
        height: fit-content;
    }

    .sui-select-label.full, .sui-select-label.full .sui-select-button {
        width: 100%;
    }

    .sui-select-label.disabled {
        opacity: 0.5;
        pointer-events: none;
        color: hsl(var(--text-muted));
    }

    .label {
        font-size: 14px;
    }

    .req-star {
        color: hsl(var(--danger-base));
        font-weight: 700;
    }

    .sui-select-button {
        padding: 0.5rem 0.75rem 0.5rem 1rem;
        border-radius: 8px;
        border: 1px solid hsl(var(--border));
        background: hsl(var(--background-step-2));
        color: hsl(var(--text-normal));
        transition: all 0.15s ease;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
        gap: 1rem;
    }

    .sui-select-button:hover {
        background: hsl(var(--background-step-3));
    }

    .sui-select-button.active,
    .sui-select-button:active,
    .sui-select-button:has(+ .sui-select-dropdown.active) {
        border: 1px solid hsl(var(--primary-base));
        background: hsl(var(--background-step-2));
    }

    .sui-select-dropdown {
        position: absolute;
        width: 100%;
        border: 1px solid hsl(var(--border));
        list-style: none;
        margin: 0;
        padding: 0;
        flex-direction: column;
        border-radius: 0.5rem;
        background-color: hsl(var(--background-step-2));
        overflow: hidden;
        top: calc(100% + 0.25rem);
        left: 0;
        display: none;
        z-index: 90;
        box-shadow: 0px 4px 8px hsl(var(--shadow), 0.5);
    }

    .sui-select-dropdown.active {
        display: flex;
    }

    .sui-select-dropdown.above {
        top: auto;
        bottom: calc(100% - 18px + 0.25rem);
    }

    .sui-select-option {
        padding: 0.5rem;
        cursor: pointer;
        font-size: 0.975em;
        transition: all 0.15s ease;
    }

    .sui-select-option.disabled {
        pointer-events: none;
        color: hsl(var(--text-muted));
    }

    .sui-select-option:hover, .sui-select-option:focus {
        background-color: hsl(var(--background-step-3));
    }

    .sui-select-option:focus {
        outline: none;
        border: none;
    }

    .sui-select-option.selected {
        background-color: hsl(var(--primary-base));
        color: hsl(var(--text-inverted));
        cursor: default;
    }

    .sui-hidden-select {
        height: 0;
        width: 0;
        border: none;
        outline: none;
        position: absolute;
        background-color: transparent;
        pointer-events: none;
        opacity: 0;
    }
</style>
