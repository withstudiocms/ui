---
import type { StudioCMSColorway } from '../../utils/colors.js';
import Button from '../Button/Button.astro';
import Icon from '../Icon/Icon.astro';
import './modal.css';

interface ButtonType {
	label: string;
	color: StudioCMSColorway;
}

/**
 * The props for the Modal component.
 */
interface Props {
	/**
	 * The ID of the modal. Required due to the helper.
	 */
	id: string;
	/**
	 * The size of the modal. Defaults to `md`.
	 */
	size?: 'sm' | 'md' | 'lg';
	/**
	 * Whether the modal is dismissable. Defaults to `true`.
	 */
	dismissable?: boolean;
	/**
	 * The cancel button of the modal. If a string is given, the button will have the danger color and flat variant,
	 * and the string will be the label. If ButtonType is given, the button will have the color and variant specified.
	 */
	cancelButton?: string | ButtonType;
	/**
	 * The action button of the modal. If a string is given, the button will have the primary color and solid variant,
	 * and the string will be the label. If ButtonType is given, the button will have the color and variant specified.
	 */
	actionButton?: string | ButtonType;
	/**
	 * Whether the modal is a form. Defaults to `false`. When set to true, the modal helpers submit callback will include
	 * the form data.
	 */
	isForm?: boolean;
}

const {
	id,
	size = 'md',
	dismissable = true,
	isForm = false,
	cancelButton,
	actionButton,
} = Astro.props;
---
<dialog
  popover
  id={id}
  data-dismissable={`${dismissable}`}
  data-has-action-button={actionButton}
  data-has-cancel-button={cancelButton}
  class="sui-modal"
  class:list={[size]}
  data-form={isForm}
>
  <div class="sui-modal-header">
    <slot name="header" />
    {(dismissable || (!cancelButton && !actionButton)) && (
      <button class="x-mark-container" id={`${id}-btn-x`}>
        <Icon name="x-mark" width={24} height={24} class={'dismiss-icon'} />
      </button>
    )}
  </div>
  <form id={`${id}-form-element`}>
    <div class="sui-modal-body">
      <slot />
    </div>
    <div class="sui-modal-footer">
      {cancelButton && (
        <Button
          id={`${id}-btn-cancel`}
          color={typeof cancelButton === 'string' ? 'danger' : cancelButton.color} 
          variant='flat'
          type={isForm ? 'reset' : 'button'}
        >
          {typeof cancelButton === 'string' ? cancelButton : cancelButton.label}
        </Button>
      )}
      {actionButton && (
        <Button 
          id={`${id}-btn-confirm`} 
          type={'submit'} 
          color={typeof actionButton === 'string' ? 'primary' : actionButton.color} 
          variant='solid' 
          type={isForm ? 'submit' : 'button'}
        >
          {typeof actionButton === 'string' ? actionButton : actionButton.label}
        </Button>
      )}
    </div>
  </form>
</dialog>
