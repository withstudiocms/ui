---
import type { StudioCMSColorway } from 'src/utils/colors';
import Icon from '../../utils/Icon.astro';
import Button from '../Button.astro';

interface ButtonType {
  label: string;
  color: StudioCMSColorway;
}

interface Props {
	id: string;
	size?: 'sm' | 'md' | 'lg';
	dismissable?: boolean;
	cancelButton?: string | ButtonType;
	actionButton?: string | ButtonType;
	isForm?: boolean;
};

const { id, size = 'md', dismissable = true, isForm = false, cancelButton, actionButton } = Astro.props;
---
<dialog
  popover
  id={id}
  data-dismissable={`${dismissable}`}
  data-has-action-button={actionButton}
  data-has-cancel-button={cancelButton}
  class="sui-modal"
  class:list={[size]}
  data-form={`${isForm}`}
>
  <div class="sui-modal-header">
    <slot name="header" />
    {(dismissable || (!cancelButton && !actionButton)) && (
      <button class="x-mark-container" id={`${id}-btn-x`}>
        <Icon name="x-mark" width={24} height={24} class={'dismiss-icon'} />
      </button>
    )}
  </div>
  <form id={`${id}-form-element`}>
    <div class="sui-modal-body">
      <slot />
    </div>
    <div class="sui-modal-footer">
      {cancelButton && (
        <Button
          id={`${id}-btn-cancel`}
          color={typeof cancelButton === 'string' ? 'danger' : cancelButton.color} 
          variant='flat'
          type={isForm ? 'reset' : 'button'}
        >
          {typeof cancelButton === 'string' ? cancelButton : cancelButton.label}
        </Button>
      )}
      {actionButton && (
        <Button 
          id={`${id}-btn-confirm`} 
          type={'submit'} 
          color={typeof actionButton === 'string' ? 'primary' : actionButton.color} 
          variant='solid' 
          type={isForm ? 'submit' : 'button'}
        >
          {typeof actionButton === 'string' ? actionButton : actionButton.label}
        </Button>
      )}
    </div>
  </form>
</dialog>
<style>
  .sui-modal {
    border: 1px solid hsl(var(--border));
    border-radius: .5rem;
    padding: 1.5rem;
    box-shadow: 0px 6px 8px hsl(var(--shadow));
    animation: hide .25s ease;
    overflow: visible;
    margin: auto;
    z-index: 50;
  }

  .sui-modal.sm {
    width: 384px;
  }

  .sui-modal.md {
    width: 448px;
  }

  .sui-modal.lg {
    width: 608px;
  }

  .sui-modal[open] {
    animation: show .25s ease-in-out;
  }

  html:has(.sui-modal[open]),
  body:has(.sui-modal[open]) {
    overflow: hidden;
  }

  .sui-modal[open]::backdrop {
    background-color: rgba(0, 0, 0, 0.75);
    animation: backdrop .3s ease-in-out forwards;
  }

  .sui-modal-header:has(*) {
    margin-bottom: 1rem;

    display: flex;
    flex-direction: row;
    justify-content: space-between;
    gap: 1rem;

    * {
      margin: 0;
    }
  }

  .x-mark-container {
    cursor: pointer;
    height: 1.5rem;
    width: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color .15s ease;
    border-radius: .25rem;
  }

  .x-mark-container:hover {
    background-color: hsl(var(--default-base));
  }

  .sui-modal-footer {
    display: none;
  }

  .sui-modal-footer:has(*) {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    margin-top: 1rem;
    justify-content: end;
  }

  @keyframes hide {
    0% {
      scale: 1;
      opacity: 1;
      display: block;
    }
    100% {
      scale: 0.85;
      opacity: 0;
      display: none;
    }
  }

  @keyframes show {
    0% {
      scale: 0.85;
      opacity: 0;
      display: none;
    }
    100% {
      scale: 1;
      opacity: 1;
      display: block;
    }
  }

  @keyframes backdrop {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
</style>
