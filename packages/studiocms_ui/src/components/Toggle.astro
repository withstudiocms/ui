---
import type { StudioCMSColorway } from '../utils/colors';
import { generateID } from '../utils/generateID';

/**
 * The props for the toggle component
 */
interface Props {
  /**
   * The label of the toggle.
   */
	label: string;
  /**
   * The size of the toggle. Defaults to `md`.
   */
	size?: 'sm' | 'md' | 'lg';
  /**
   * The color of the toggle. Defaults to `default`.
   */
	color?: StudioCMSColorway;
  /**
   * Whether the toggle is checked by default. Defaults to `false`.
   */
	defaultChecked?: boolean;
  /**
   * Whether the toggle is disabled. Defaults to `false`.
   */
	disabled?: boolean;
  /**
   * The name of the toggle.
   */
	name?: string;
  /**
   * Whether the toggle is required. Defaults to `false`.
   */
	isRequired?: boolean;
}

const {
	size = 'md',
	color = 'default',
	defaultChecked,
	disabled,
	name = generateID('checkbox'),
	label,
	isRequired,
} = Astro.props;
---
<label
  class="sui-toggle-label"
  for={name}
  class:list={[
    disabled && "disabled",
    color,
    size,
  ]}
>
  <div class="sui-toggle-container">
    <div 
      class="sui-toggle-switch"
      tabindex="0"
      role="checkbox"
      aria-checked={defaultChecked}
      aria-label={label}
    />
    <input
      type="checkbox"
      name={name}
      id={name}
      checked={defaultChecked}
      disabled={disabled}
      required={isRequired}
      class="sui-toggle-checkbox"
      hidden
    />
  </div>
  <span id={`label-${name}`}>
    {label} <span class="req-star">{isRequired && "*"}</span>
  </span>
</label>
<script>
  const elements = document.querySelectorAll<HTMLDivElement>('.sui-toggle-container');
  const toggles = document.querySelectorAll<HTMLInputElement>('.sui-toggle-checkbox');

  for (const element of elements) {
    if (element.dataset.initialized) continue;
    
    element.dataset.initialized = 'true';

    element.addEventListener('keydown', (e) => {
      if (e.key !== 'Enter' && e.key !== ' ') return;

      e.preventDefault();

      const checkbox = element.querySelector<HTMLInputElement>('.sui-toggle-checkbox');
        
      if (!checkbox) return;

      checkbox.click();
    });
  }

  for (const box of toggles) {
    if (box.dataset.initialized) continue;

    box.dataset.initialized = 'true';

    box.addEventListener('change', (e) => {
      (box.previousSibling as HTMLDivElement).ariaChecked = (e.target as HTMLInputElement).checked ? 'true' : 'false';
    });
  }
</script>
<style>
  .sui-toggle-label {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: .5rem;
    position: relative;
    margin: .25rem 0;
  }

  .sui-toggle-label.disabled {
    opacity: 0.5;
    pointer-events: none;
    color: hsl(var(--text-muted));
  }

  .sui-toggle-label:active .sui-toggle-switch {
    transform: scale(0.85);
  }

  .sui-toggle-container {
    --toggle-height: 12px;
    --toggle-width: 40px;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all .15s ease;
    background-color: hsl(var(--default-base));
    width: var(--toggle-width);
    height: var(--toggle-height);
    border-radius: var(--toggle-height);
  }

  .sui-toggle-switch {
    --switch: calc(var(--toggle-height) * 1.75);
    height: var(--switch);
    width: var(--switch);
    background-color: hsl(var(--text-muted));
    border-radius: var(--toggle-height);
    position: relative;
    left: 0;
    transition: all .15s ease;
    will-change: transform;
  }

  .sui-toggle-switch:focus-visible {
    outline: 2px solid hsl(var(--text-normal));
    outline-offset: 2px;
  }

  .sui-toggle-container:has(.sui-toggle-checkbox:checked) .sui-toggle-switch {
    left: calc(100% - var(--switch));
    background-color: hsl(var(--text-normal));
  }

  .sui-toggle-label.sm .sui-toggle-container {
    --toggle-height: 10px;
    --toggle-width: 32px;
  }

  .sui-toggle-label.sm .sui-toggle-switch {
    --switch: calc(var(--toggle-height) * 1.65);
  }

  .sui-toggle-label.lg .sui-toggle-container {
    --toggle-height: 16px;
    --toggle-width: 48px;
  }

  .sui-toggle-label.lg .sui-toggle-switch {
    --switch: calc(var(--toggle-height) * 1.65);
  }

  .sui-toggle-label.primary .sui-toggle-container:has(.sui-toggle-checkbox:checked) {
    background-color: hsl(var(--primary-base));
  }

  .sui-toggle-label.success .sui-toggle-container:has(.sui-toggle-checkbox:checked) {
    background-color: hsl(var(--success-base));
  }

  .sui-toggle-label.warning .sui-toggle-container:has(.sui-toggle-checkbox:checked) {
    background-color: hsl(var(--warning-base));
  }

  .sui-toggle-label.danger .sui-toggle-container:has(.sui-toggle-checkbox:checked) {
    background-color: hsl(var(--danger-base));
  }

  .req-star {
    color: hsl(var(--danger-base));
    font-weight: 700;
  }

  .sui-toggle-checkbox {
    width: 0;
    height: 0;
    visibility: hidden;
    opacity: 0;
    margin: 0;
  }
</style>
